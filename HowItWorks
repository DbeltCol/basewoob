1. Puede correr las migraciones para ejecutar la base de datos y alguna información falsa

php artisan migrate --seed

2. Las relaciones escogidas para el proyecto son:

un usuario puede tener un rol = hasOne
los permisos y los roles estan asociados a una relación de muchos a muchos = belongsToMany con la tabla pivot permission_role


3. Estructura del proyecto

Para el proyecto se hace uso de los controladores y modelos de laravel, se aplica un principio solid para las consultas, Open / Close Principle.
Esto nos ayuda a crear una estructura más agradable a la hora de escoger diferentes opciones.

Para las consultas en SQL se manejan 2 formatos. Eloquent ORM y Query Builder. Al aplicar este principio logramos escalar mejor otras maneras de consultar
la base de datos.

En la raiz del proyecto se encuentran 2 carpetas:

interfaces: Hace uso a todas las interfaces a utilizar.

services: dentro de ella aplicaremos el principio y conlleva la siguiente estructura
    A. Se crea una carpeta por cada modelo.
    B. Dentro de la carpeta modelo se crea/ModelQueryService. Este archivo se encarga de llamar el servicio el cual desea ejecutar desde el controlador
    C. Hay 2 archivos más en este caso llamados ModelEloquentService y ModelSqlService. En ellos se realizan las mismas consultas pero en motores distintos
        Ya si se necesitan otros tipos de consultas o formatos como JSON, XML se extienda de manera optimizada y limpia el código.


*RUTAS PARA VALIDAR CONSULTAS*

127.0.0.1:8000/api/usuarios-por-roles : Usuarios que tengan los roles 1 y 2
127.0.0.1:8000/api/usuarios-y-roles-por-permiso : Usuarios que tengan el rol que tiene el permiso 2
127.0.0.1:8000/api/permisos-rol' : Rol que tiene el permiso 2
